//函数---折半查找法
//int search(int arr[], int x, int sz)
//{
//	int left = 0;
//	int right = sz - 1;
//	while (left <= right)
//	{
//		int mid = (right + left) / 2;
//		if (x > arr[mid])
//		{
//			left = mid + 1;
//		
//		}
//		else if (x < arr[mid])
//		{
//			right = mid - 1;
//		}
//		else
//		{
//			return mid;
//		}
//	}
//	if (right < left)
//	{
//		return -1;
//	}
//}
//int main()
//{
//	int i = 7;
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int s = search(arr, i, sz);
//	if (s == -1)
//	{
//		printf(" 没找到\n");
//	}
//	else
//	{
//		printf("找到了，下标是：%d\n", s);
//	}
//
//			
//	return 0;
//}
//void Add(int* p)
//{
//	(*p)++;
//}                                                                                                   
//int main()
//{
//	int num = 0;
//	Add(&num);
//	printf("%d\n", num);
//	Add(&num);
//	printf("%d\n", num);
//	return 0;
//}
 //函数嵌套使用
//void new_line()
//
//{
//	printf("hehe\n");
//}
//void three_line()
//{
//	int i = 0;
//	for (i = 0; i < 3; i++)
//	{
//		new_line();
//	}
//}
//int main()
//{
//	three_line();
//	return 0;
//}
//函数链式访问
//int main()
//{
//	printf("%d", printf("%d", printf("%d", 43)));
//	return 0;
//}
//函数跨文件调用
//#include"add.h"
//int main()
//{
//int a = 10;
//int b = 11;
//int sum = add(a, b);
//printf("%d\n", sum);
//return 0;
//}
//递归
//int main()
//{
//	printf("hehe\n");
//	main();
//	return 0;
//}
// 递归2
//count = 0;
//int main()
//{
//	
//	printf("hehe\n");
//	count++;
//	if (count < 2)
//		main();
//	return 0;
//}
// 递归
//void print(int x)
//{
//	if (x > 9)
//	{
//		print(x/ 10);
//	}
//	printf("%d\n", x % 10);
//}
//int main()
//{
//	int a = 0;
//	scanf("%d", &a);
//	print(a);
//	return 0;
//}
// 递归
//int my_strlen(char* str)
//{
//	if (*str != '\0')
//	{
//		return 1 + my_strlen(str + 1);
//	}
//	else
//		return 0;
//}
//int main()
//
//{
//	char arr[] = "abcde";
//	int len = my_strlen(arr);
//	printf("%d\n", len);
//
//	return 0;
//}
//函数--n的阶乘
//int Fac(int x)
//{
//	int ret = 1;
//	int i = 0;
//	for (i = 1; i <=x; i++)
//	{
//		ret *= i;
//	}
//	return ret;
//}
//int main()
//{
//	int a;
//	scanf("%d", &a);
//	int s = Fac(a);
//	printf("%d", s);
//	return 0;
//}
//函数--n的阶乘
//int Fac(int x)
//{
//	int ret = 1;
//	if (x > 0)
//	{
//		ret = x * Fac(x - 1);
//		return ret;
//	}
//	else
//		return 1;
//	
//}
//int main()
//{
//	int a;
//	scanf("%d", &a);
//	int s = Fac(a);
//	printf("%d", s);
//	return 0;
//}
